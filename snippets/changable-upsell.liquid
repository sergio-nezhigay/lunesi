<script>
    function getUpsellRules() {
      var rules = {{ settings.upsell_products_setting | json }};
      return rules;
    }
    
    function getCartProducts() {
      {% comment %} Use DOM to get all .mini-cart__navigation li and their data-product-id attributes {% endcomment %}
      var cartProducts = [];
      document.querySelectorAll('.mini-cart__navigation li[data-product-id]').forEach(function(li) {
        var id = li.getAttribute('data-product-id');
        if (id) {
          cartProducts.push("gid://shopify/Product/" + id);
        }
      });
      return cartProducts;
    }
    
    function normalizeProductList(list) {
      var normalized = Array.isArray(list) ? list.map(function(obj) {
        if (typeof obj === 'string') return obj;
        if (obj && obj.gid) return obj.gid;
        return null;
      }).filter(Boolean) : [];
      return normalized;
    }
    
    function extractProductsFromRule(rule) {
      var ifProducts = [];
      if (rule.if && Array.isArray(rule.if)) {
        ifProducts = normalizeProductList(rule.if);
      } else if (rule.if && rule.if.value && Array.isArray(rule.if.value)) {
        ifProducts = normalizeProductList(rule.if.value);
      }
      var thenProducts = [];
      if (rule.then && Array.isArray(rule.then)) {
        thenProducts = normalizeProductList(rule.then);
      } else if (rule.then && rule.then.value && Array.isArray(rule.then.value)) {
        thenProducts = normalizeProductList(rule.then.value);
      }
      return { ifProducts: ifProducts, thenProducts: thenProducts };
    }
    
    function findMatchingUpsellRule(upsellRules, cartProducts) {
      for (var i = 0; i < upsellRules.length; i++) {
        var rule = upsellRules[i];
        var products = extractProductsFromRule(rule);
        var ifProducts = products.ifProducts;
        var thenProducts = products.thenProducts;
        if (
          ifProducts.length === cartProducts.length &&
          ifProducts.every(function(gid) { return cartProducts.indexOf(gid) !== -1; }) &&
          cartProducts.every(function(gid) { return ifProducts.indexOf(gid) !== -1; })
        ) {
          return { rule: rule, thenProducts: thenProducts };
        }
      }
      return null;
    }
    
    function updateUpsellBlocks(thenProducts) {
      var upsellHandles = (thenProducts || []).map(function(obj) {
        if (typeof obj === 'string') return obj;
        if (obj && obj.gid) return obj.gid;
        return null;
      }).filter(Boolean);
      var upsellBlocks = document.querySelectorAll('.mini-cart__upsell-list .mini-cart__upsell-item');
      upsellBlocks.forEach(function(block) {
        var handle = block.getAttribute('data-product-id');
        var shouldShow = upsellHandles.some(function(gid) {
          var match = gid.match(/(\d+)$/);
          var gidId = match ? match[1] : gid;
          return gidId == handle || gid == handle;
        });
        if (shouldShow) {
          block.style.display = 'block';
        } else {
          block.style.display = 'none';
        }
      });
    }
    
    function processUpsell() {
      var upsellRules = getUpsellRules();
      var cartProducts = getCartProducts();
      var match = findMatchingUpsellRule(upsellRules, cartProducts);
      if (!match) {
        return;
      }
      var thenProducts = match.thenProducts;
      updateUpsellBlocks(thenProducts);
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      processUpsell();
      //setInterval(processUpsell, 100);
    });
    
    document.addEventListener('cart:updated', function() {
      processUpsell();
    });
    </script>
    